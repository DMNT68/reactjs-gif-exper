{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","placeholder","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","GifExpertApp","categories","idx","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,YAAY,oBAAoBC,SAdjD,SAACR,GACxBF,EAAcE,EAAES,OAAOH,a,+BCPdI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCF,EADnC,+DAEAG,MAAMD,GAFN,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATnB,kBAaXK,GAbW,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAGxB,ECH0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAAAd,GACnBY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGd,CAACnB,IAEGoB,EDZ0BI,CAAaxB,GAAjCY,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAIrB,OAFAM,QAAQC,IAAIP,GAGV,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDf,IAClDmB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEZtCiB,EAAe,WAE1B,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWpB,KAAI,SAACR,EAAU6B,GAAX,OACd,cAAC,EAAD,CAAqC7B,SAAUA,GAA/C,UAAkBA,EAAW6B,a,MCXvCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.81e9adf9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const hadleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} placeholder=\"Escriba un nombre\" onChange={hadleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=YJMD03zgiT23o0VdM4JYYwdwoQOimFvV`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return (gifs);\r\n  };","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from '../components/GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  \r\n\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  console.log(loading)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p>Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => <GifGridItem key={img.id} {...img} />)}\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport {getGifs} from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(img => {\r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n        });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  //   const categories = ['One Punchman', 'Samurai X', 'Dragon ball'];\r\n  const [categories, setCategories] = useState(['One puchman']);\r\n\r\n  return (\r\n    <div>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category, idx) => (\r\n          <GifGrid key={`${(category = idx)}`} category={category} />\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}